######### BEGIN TEAM MEETING NOTES 9/24/2023 #########
Team Meeting 9.24
WHEN: Sunday, September 24th @ 2:30pm
WHERE: The Nest Lawrence, poolside. 
PURPOSE: First team meeting. Decide a team name. Designate & design roles, begin project documentation and organization.
ATTENDANCE: 5/5 --> Michael Stang, Blake Carlson, Logan Smith, Jack Bauer, Holden Vail

--> First, we setup a group chat for general project related discussion and we used / will use the Canvas group to organize our meetings.
--> We began with a discussion as to which roles we may need, what their responsibilities may be, and what methodology our process should follow. 

Agenda Item 1: Role designation:
Team Administrator: Michael Stang
	Responsible for:
		- Organizing & leading team meetings
		- Establishing agendas & setting internal deadlines
		- Ensuring proper communication between roles
		- Coordinating with stakeholders 
		- General team communication with outside entities, in particular in regards to internal relations
		- Assisting where needed
Assistant Team Administrator: Jack Bauer
	Responsible for:
		- Recording team meetings & taking and posting minutes
		- Assisting the team administrator with misc tasks
		- Filling in for the team administrator in extenuating circumstances 
		- Managing the GitHub repository and ensuring completion of deliverables
		- Assisting where needed
Technical Lead: Blake Carlson
	Responsible for:
		- Lead the implementation of the Design Lead's requirements
		- Assign technical tasks to team members but be ultimately responsible for their completion
		- Assisting where needed
Design Lead: Logan Smith
	Responsible for:
		- Lead the creation of design deliverables and design requirements
		- Ensure technical implementations are completed in accordance with design requirements
		- Assisting where needed
Requirements and Quality Lead: Holden Vail
	Responsible for:
		- Lead the Requirement Engineering phase of the project
		- Ensure quality and completion of design and implementation in accordance with designated requirements
		- Ensure tasks are completed by deadlines and follow up with team members to minimize blockers
		- Assisting where needed

--> There was very little disagreement about roles and responsibilities, and so we were able to complete this portion relatively quickly and without any legitimate conflict.
--> We took a short break in order to move locations to charge our laptops.
--> We began the process of deciding on a team name

Agenda Item 2: Team Name
	Ideas:
		- Team 17
		- 17 Co. 
		- Pool Co.
		- pool.io
		- pool.co
		- poolio.co

--> We decided on 17 Co. because our group number on Canvas is 17. 
--> We decided our project name (which may change throughout development) will be "17 Co. Calculator".
--> We began work on our Software Development Plan.
	- We faced some technical difficulties using Microsoft Word's collaboration feature, in particular the internet was unstable and so it took a while for word to update for everyone when one person made changes. But, we proceeded with caution and were ultimately successful despite the inefficiency.  
	- We had a lot of discussions about how to structure the project, and ultimately decided to use incremental phases, based upon the assignment dates of each section in the syllabus, with each Phase including multiple iterations to be implemented and executed by the appropriate lead. For example, the requirements engineering phase and its iterations will be planned and led by the Requirements and Quality lead.

--> We added a variety of responsibilities to be completed before the next meeting:
	- The Requirements and Quality Lead must ensure the creation and initial draft of the Vision Document and plan the requirements engineering phase.
	- The Assistant Team Administrator will ensure the completion of meeting logs and the creation and initial draft of the project glossary.
	- The Technical Lead and Design Lead will ensure the creation and initial draft of project iteration plans. 
	- The Team Administrator will ensure the completion of all tasks and schedule the next meeting and will create a checklist of items to complete, based on the Software Development Plan, at the start of each Phase and each iteration with the appropriate feedback and input from each lead.

--> The next meeting will be scheduled by the Team Administrator in Canvas.
######### END TEAM MEETING NOTES 9/24/2023 #########

######### BEGIN TEAM MEETING NOTES 9/29/2023 #########
Team Meeting 9.29
WHEN: Friday, September 29th @ 4:00pm
WHERE: The Nest Lawrence. 
PURPOSE: Second team meeting. Planning the requirements specification completion process, and will complete EC Quiz 1 if there is time.
ATTENDANCE: 5/5 --> Michael Stang, Blake Carlson, Logan Smith, Jack Bauer, Holden Vail

--> We began by confirming role knowledge and going over the agenda and objectives for the meeting.
--> We decided, since our last meeting ran for around 5 hours, we will not complete work necessarily during the meeting but will instead assign new tasks for people to complete on their own time
--> Today we begin a new phase, with this phase being lead by our Requirements and Quality Lead: Holden.
--> He needs to complete various tasks as specified in our Software Development Plan, and there are a variety of other plans and documents that must be completed by a variety of other team members, such as the iteration plans. 
--> A few updates must also be made to the Software Development Plan, as specified at the beginning of each phase.
--> Holden suggested we post assignments to individuals through Canvas as needed, so he and Michael will work on completing that, in order to achieve greater efficiency and clarity in tasks. 
--> While we have a shared folder of live documents on Canvas, when versions are completed they will be goldenized and uploaded to GitHub. 
--> Jack will begin the Project Glossary
--> We had a great discussion about what each of us will be responsible according to our roles
	For example: Holden takes in a problem and figures out what features need to be made. Logan takes in those features and designs more high level details such as what classes we need. Blake takes that design specification and figures out how we will implement those technically. We then take that, optimize, fix bugs, etc which Holden will make sure matches our requirements. Michael and Jack organize the whole project.  

Phase 2 Objectives:
- Completion of Software Requirements Specification - Holden leads
- Glossary creation - Jack
- Establish meeting cadence - Michael
- Establish a proper review process - Michael

--> We planned the dates and deadlines for new meetings, work completed, etc.
Backlog (a list of tasks that need to be done to complete the phase) due 10/4
Requirements Specification due 10/13 (due for class on 10/15)
Glossary due 10/13

--> Our next meeting will be October 2nd, 4pm @ The Nest, Lawrence
######### END TEAM MEETING NOTES 9/29/2023 #########

######### BEGIN TEAM MEETING NOTES 10/2/2023 #########
Team meeting 10.2
WHEN: Monday, October 2nd @ 4:00pm
WHERE: The Nest Lawrence. 
PURPOSE: Third team meeting. Holden provides tasks in order to complete requirements engineering phase.
ATTENDANCE: 5/5 --> Michael Stang, Blake Carlson, Logan Smith, Jack Bauer, Holden Vail

--> Holden, as phase leader, began by delegating tasks for the requirements engineering phase. The documents are all in One Drive.
--> From correspondence with the Professor, we will not use Canvas announcements as much because he was being unnecessarily notified by our Canvas page. Most other correspondence  will be conducted in less formal settings as required. We will also still have information on the "pages" tab in Canvas.
--> Our team is now focused on completing the Software Requirements Specification.

For the Software Requirements Specifications. More details are in the Meeting 3 Agenda:
 - Michael completes sections 1-1.5 by 10/13
 - Blake completes sections 2-2.1.7 by 10/5
 - Jack completes sections 2.2-3.1 by 10/11
 - Holden completes sections 3.1.1-3.1.15 by 10/3
 - Logan completes sections 3.2-5 by 10/8

--> Holden will develop and communicate an iteration plan to specify how the Software Requirements Specification will be completed. This will be the general order of completion that we have decided on. We will follow a schedule in completing this. 
 - Holden --> Blake --> Logan --> Jack --> Michael
 - 10/3	      10/5      10/8      10/11    10/13

--> We will also review each other's work to make sure everything is communicated well and as we intend.

--> NOTE: While completing this phase, make sure to continue referencing the Project Description document "00-Project-Description.pdf".

--> Our next meeting is tentatively 10/19 @ 4:15 pm 

######### END TEAM MEETING NOTES 10/2/2023 #########

######### BEGIN TEAM MEETING NOTES 11/2/2023 #########
Team meeting 11.2
WHEN: Thursday, November 2nd @ 4:00pm
WHERE: The Nest Lawrence. 
PURPOSE: Fourth team meeting. 
ATTENDANCE: 5/5 --> Michael Stang, Blake Carlson, Logan Smith, Jack Bauer, Holden Vail

--> Requirements engineering phase has been completed as specified earlier. We communicated asynchronously to pass the parts of the phease from team member to team member, and completed the deliverables on time to specficiation.
--> We began with a discussion of objectives, followed by a phase description from Logan, and a look ahead into the future.
--> We reminded our team members that deadlines are important and we must be done by deadlines.
--> We also reminded our team members that we must match formatting across team members when working on a document
--> Phase 3 - Design Phase
	- Objective 1: 
		- New document!!! Software Architecture due to professor 11/12 @ 11:59 pm 
		- due 11/11 @ 11:59pm to Michael
		- due 11/10 @ 11:59pm to Logan (Design lead)
		- All but part 1 due 11/8 @ 11:59pm
	- Objective 2: Update SDP
--> Objective 1 tasks due 11/8 @ 11:59pm:
	- Document part 1 - Michael
	- Document part 2 - Jack
	- Document part 3 - Jack
	- Document part 4 - Not necessary to complete
	- Document part 5 - Blake
	- Document part 6 - Logan
	- Document part 7 - Not necessary to comeplete
	- Document part 8 - Holden
--> After assigning document completion, we began a discussion of architecture. Ideas:
	- Using C++
	- Get string input from console, output a string
	- Will likely need to use vectors in order to iterate by character
	- Check if a character is numeric to tell pieces apart, have a second vector of equal length of 0's or 1's to signal if a character is a number or letter in the first vector.
	- Iterate to break up the vector into parts
	- Simplify function, potentially recursively, and eventually out a number. A function to get the next step. A function to check if valid. 
	- Etc. This will be further refined.
	- We have a loose sketch in document D0010
--> On the class level, parts 4, 5, 6 due 12/3
--> Here is an outline of what we're planning:
	- Part 4.1: Implementation --> 11/8 - 11/21
	- Part 5: Test cases --> 11/22 - 11/24
	- Part 4.2: Fixed implementation --> 11/25 - 11/26
	- Part 6: User manual --> 11/27 - 11/30
	- 12/1-12/2 everyone must go through and make sure everything looks good, especially Michael
	- All deadlines at 11:59pm
--> Our next meeting is tentatively 11/12 @ 4pm
######### END TEAM MEETING NOTES 11/2/2023 #########

######### BEGIN TEAM MEETING NOTES 11/12/2023 #########
Team meeting 11.12
WHEN: Sunday, November 12th @ 7:00pm
WHERE: The Nest Lawrence. 
PURPOSE: Fifth team meeting. 
ATTENDANCE: 5/5 --> Michael Stang, Blake Carlson, Logan Smith, Jack Bauer, Holden Vail

--> We began with a discussion on deadlines and how we must follow our own internal deadlines.
--> We also began with a discussion on quality and how it went on our last document.
--> The bottom line is that as a whole we must put a renewed focus on keeping up with deadlines and quality assurance.
--> We will also be changing our return time, and implement a reviews process.
	- Assignments will be reviewed, and notes will be provided to the author so they can fix it themselves. 
	- Due dates will be sooner, and assignments will be reviewed by the phase lead and team lead. 
	- Documents also will be locked at deadlines. 
--> We are now beginning the implementation phase
	- We must further our github, i.e. add a readme, organize it for the future, consolidate docs, etc.
	- We must also work on the GitHub page
--> New deadlines:
	- Implementation due from Blake to team lead on Monday 11/20 by 11:59pm
	- Implementation feedback returned on 11/21 
	- Feedback fixed by 11/26
	- Test cases due 11/27
	- User manual due 11/28
	- User manual feedback by 11/29
	- User manual final due 11/30
--> Implementation phase will be run by Blake
--> Must be written in C++
--> Semantics & standards
	- camelCase
	- Docstrings - 1..2 sentences, brief inline comments
		- Comments within reason. Explain purpose and high level what's happening at least
	- Constants all uppercase

Function definitions:
for (...) {
	// looped code here
}

If-else:
if (...) {
	
} if else {
	
} else {

}

--> Program flowchat - refer to document D00004
	- Text based UI - step 1
		- In: math expression
		- Out: answer
		- Expressions will be stored as a string
	- Expression symbol check - Step 1.5
		- In: string
		- Out: string
		- Check valid symbols - character, operator, parenthesis, number, etc.
		- Check at least one character
	- Expression conversion function - step 2
		- In: math expression
		- Out: well formatted expression
		- Using vectors potentially
		- Idea - key vector and expression vector:
			- 0, 1, 2, 3
			- number, operator, open parenthesis, close parenthesis
	- Expression validity check - step 2.5
		- So that the calculator can assume good input
	- expression calculator - step 3
		- In: well formatted expression
		- Out: expression solution
		- If a function finds no solution, it will return an error. So, we must have error handling
	- Potentially will need to loop conversion and calculator multiple times

- Both key and expression vectors will propgrate through the whole system, but for simplicity I will just refer to both as "vector" for IO and ease of reading purposes, unless where necessary to differentiate.
- Basic schema:
- Console --> IN (out: string) --> prelim check (out: string) --> vectorify (out: vector) --> check valid (out: error or vector)
	--> recursive solve (final out: vector w/ length 1) --> OUT (value) --> Console
- Recursive solve
	- Basis: a vector with length 1
	- calls vector solve (inputs and outputs a vector) to simplify the expression
- Vector solve
	- Simplify the expression by one step
	- Part 1 - Find next step
	- Part 2 - Calculate & refactor expression, make a new key

- Using math library

--> We will also implement a code review system and we will implement an error handling in IN with error types
	- At least divide by zero and syntax error
--> Parts:
	- IN/OUT --> Holden - and handle errors 
	- Check symbol --> Holden
	- Check valid --> Holden
	- Vectorify --> Holden
	- RecSolve & Simplify -->  Michael, Logan, Blake, Jack
	- GitHub readme & organizing GitHub --> Jack
--> Blake will review Holden's parts
--> Jack and Holden will review everyone else

######### END TEAM MEETING NOTES 11/12/2023 #########